'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reduce = require('shift-reducer').default;

function uniq(array) {
  return Object.keys(array.reduce(function (p, n) {
    p[n] = true;return p;
  }, {}));
}

function analyze(ast) {
  if ((typeof ast === 'undefined' ? 'undefined' : _typeof(ast)) !== 'object') throw new Error('invalid argument to analyze(), AST required');

  var reducer = new _reducer2.default();
  var reduced = reduce(reducer, ast);

  return {
    average: {
      complexity: calculateAverage('cyclomatic', reducer, reduced),
      lloc: calculateAverage('lloc', reducer, reduced),
      functionComplexity: calculateAverage('cyclomatic', reducer, null),
      functionLloc: calculateAverage('lloc', reducer, null)
    },
    lloc: 0,
    functions: summarizeFunctions(reducer),
    operators: reducer.operators,
    operands: reducer.operands,
    distinctOperators: uniq(reducer.operators),
    distinctOperands: uniq(reducer.operands)
  };
}

function isRootNode(ast) {
  return ast.type === 'Module' || ast.type === 'Script';
}

function calculateAverage(prop, reducer, ast) {
  var scopes = reducer.functions.concat();
  if (ast && isRootNode(ast)) scopes.push(ast);

  var total = scopes.reduce(function (p, n) {
    return p + n.complexity.aggregate[prop];
  }, 0);
  return total / scopes.length;
}

function summarizeFunctions(reducer) {
  return reducer.functions.map(function (fn) {
    return computeStats(fn.complexity.aggregate);
  });
}

function computeStats(stats) {
  var computed = {
    lloc: stats.lloc,
    cyclomatic: stats.cyclomatic,
    operators: stats.operators,
    operands: stats.operands,
    distinctOperators: uniq(stats.operators),
    distinctOperands: uniq(stats.operands),
    vocabulary: 0,
    length: 0,
    volume: 0,
    difficulty: 0,
    effort: 0,
    time: 0,
    bugs: 0,
    maintainability: 0
  };

  computed.vocabulary = computed.distinctOperands.length + computed.distinctOperators.length;
  computed.length = computed.operands.length + computed.operators.length;
  computed.volume = computed.length * (Math.log(computed.vocabulary) / Math.LN2);
  computed.difficulty = computed.distinctOperators.length / 2 * (computed.operators.length / computed.distinctOperands.length);
  computed.effort = computed.difficulty * computed.volume;
  computed.time = 1000 * (computed.effort / 18);
  computed.bugs = Math.pow(computed.effort, 2 / 3) / 3000;

  computed.maintainability = Math.max(0, (171 - 5.2 * Math.log(computed.volume) - 0.23 * computed.cyclomatic - 16.2 * Math.log(computed.lloc)) * 100 / 171);
  return computed;
}

exports.default = {
  analyze: analyze
};
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQztBQUM5QyxVQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUV0RCxVQUFRLENBQUMsZUFBZSxHQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNKLEdBQUcsR0FDSCxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQy9CLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxHQUMxQixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUEsR0FDOUIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLFNBQU8sUUFBUSxDQUFDO0NBQ2pCOztrQkFFYztBQUNiLFNBQU8sRUFBUCxPQUFPO0NBQ1IiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciByZWR1Y2UgPSByZXF1aXJlKCAnc2hpZnQtcmVkdWNlcicpLmRlZmF1bHQ7XG5cbmltcG9ydCBDb21wbGV4aXR5UmVkdWNlciBmcm9tICcuL3JlZHVjZXInO1xuXG5mdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhcnJheS5yZWR1Y2UoKHAsbikgPT4ge3Bbbl0gPSB0cnVlOyByZXR1cm4gcDt9LHt9KSk7XG59XG5cbmZ1bmN0aW9uIGFuYWx5emUoYXN0KSB7XG4gIGlmICh0eXBlb2YgYXN0ICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFyZ3VtZW50IHRvIGFuYWx5emUoKSwgQVNUIHJlcXVpcmVkJyk7XG4gIFxuICB2YXIgcmVkdWNlciA9IG5ldyBDb21wbGV4aXR5UmVkdWNlcigpO1xuICB2YXIgcmVkdWNlZCA9IHJlZHVjZShyZWR1Y2VyLCBhc3QpO1xuXG4gIHJldHVybiB7XG4gICAgYXZlcmFnZSA6IHtcbiAgICAgIGNvbXBsZXhpdHk6IGNhbGN1bGF0ZUF2ZXJhZ2UoJ2N5Y2xvbWF0aWMnLCByZWR1Y2VyLCByZWR1Y2VkKSxcbiAgICAgIGxsb2M6IGNhbGN1bGF0ZUF2ZXJhZ2UoJ2xsb2MnLCByZWR1Y2VyLCByZWR1Y2VkKSxcbiAgICAgIGZ1bmN0aW9uQ29tcGxleGl0eTogY2FsY3VsYXRlQXZlcmFnZSgnY3ljbG9tYXRpYycsIHJlZHVjZXIsIG51bGwpLFxuICAgICAgZnVuY3Rpb25MbG9jOiBjYWxjdWxhdGVBdmVyYWdlKCdsbG9jJywgcmVkdWNlciwgbnVsbClcbiAgICB9LFxuICAgIGxsb2M6IDAsXG4gICAgZnVuY3Rpb25zOiBzdW1tYXJpemVGdW5jdGlvbnMocmVkdWNlciksXG4gICAgb3BlcmF0b3JzOiByZWR1Y2VyLm9wZXJhdG9ycyxcbiAgICBvcGVyYW5kczogcmVkdWNlci5vcGVyYW5kcyxcbiAgICBkaXN0aW5jdE9wZXJhdG9yczogdW5pcShyZWR1Y2VyLm9wZXJhdG9ycyksXG4gICAgZGlzdGluY3RPcGVyYW5kczogdW5pcShyZWR1Y2VyLm9wZXJhbmRzKVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1Jvb3ROb2RlKGFzdCkge1xuICByZXR1cm4gYXN0LnR5cGUgPT09ICdNb2R1bGUnIHx8IGFzdC50eXBlID09PSAnU2NyaXB0Jztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQXZlcmFnZShwcm9wLCByZWR1Y2VyLCBhc3QpIHtcbiAgbGV0IHNjb3BlcyA9IHJlZHVjZXIuZnVuY3Rpb25zLmNvbmNhdCgpO1xuICBpZiAoYXN0ICYmIGlzUm9vdE5vZGUoYXN0KSkgc2NvcGVzLnB1c2goYXN0KTtcblxuICB2YXIgdG90YWwgPSBzY29wZXMucmVkdWNlKChwLG4pID0+IHAgKyBuLmNvbXBsZXhpdHkuYWdncmVnYXRlW3Byb3BdLCAwKTtcbiAgcmV0dXJuIHRvdGFsIC8gc2NvcGVzLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gc3VtbWFyaXplRnVuY3Rpb25zKHJlZHVjZXIpIHtcbiAgcmV0dXJuIHJlZHVjZXIuZnVuY3Rpb25zLm1hcChmbiA9PiBjb21wdXRlU3RhdHMoZm4uY29tcGxleGl0eS5hZ2dyZWdhdGUpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0YXRzKHN0YXRzKSB7XG4gIHZhciBjb21wdXRlZCA9IHtcbiAgICBsbG9jOiBzdGF0cy5sbG9jLFxuICAgIGN5Y2xvbWF0aWM6IHN0YXRzLmN5Y2xvbWF0aWMsXG4gICAgb3BlcmF0b3JzOiBzdGF0cy5vcGVyYXRvcnMsXG4gICAgb3BlcmFuZHM6IHN0YXRzLm9wZXJhbmRzLFxuICAgIGRpc3RpbmN0T3BlcmF0b3JzOiB1bmlxKHN0YXRzLm9wZXJhdG9ycyksXG4gICAgZGlzdGluY3RPcGVyYW5kczogdW5pcShzdGF0cy5vcGVyYW5kcyksXG4gICAgdm9jYWJ1bGFyeTowLFxuICAgIGxlbmd0aDowLFxuICAgIHZvbHVtZTowLFxuICAgIGRpZmZpY3VsdHk6MCxcbiAgICBlZmZvcnQ6MCxcbiAgICB0aW1lOjAsXG4gICAgYnVnczowLFxuICAgIG1haW50YWluYWJpbGl0eTowLFxuICB9O1xuICBcbiAgY29tcHV0ZWQudm9jYWJ1bGFyeSA9IGNvbXB1dGVkLmRpc3RpbmN0T3BlcmFuZHMubGVuZ3RoICsgY29tcHV0ZWQuZGlzdGluY3RPcGVyYXRvcnMubGVuZ3RoO1xuICBjb21wdXRlZC5sZW5ndGggPSBjb21wdXRlZC5vcGVyYW5kcy5sZW5ndGggKyBjb21wdXRlZC5vcGVyYXRvcnMubGVuZ3RoO1xuICBjb21wdXRlZC52b2x1bWUgPSBjb21wdXRlZC5sZW5ndGggKiAoTWF0aC5sb2coY29tcHV0ZWQudm9jYWJ1bGFyeSkgLyBNYXRoLkxOMik7XG4gIGNvbXB1dGVkLmRpZmZpY3VsdHkgPSAoY29tcHV0ZWQuZGlzdGluY3RPcGVyYXRvcnMubGVuZ3RoIC8gMikgKiAoY29tcHV0ZWQub3BlcmF0b3JzLmxlbmd0aCAvIGNvbXB1dGVkLmRpc3RpbmN0T3BlcmFuZHMubGVuZ3RoKTtcbiAgY29tcHV0ZWQuZWZmb3J0ID0gY29tcHV0ZWQuZGlmZmljdWx0eSAqIGNvbXB1dGVkLnZvbHVtZTtcbiAgY29tcHV0ZWQudGltZSA9IDEwMDAgKiAoY29tcHV0ZWQuZWZmb3J0IC8gMTgpO1xuICBjb21wdXRlZC5idWdzID0gTWF0aC5wb3coY29tcHV0ZWQuZWZmb3J0LCAyLzMpIC8gMzAwMDtcbiAgXG4gIGNvbXB1dGVkLm1haW50YWluYWJpbGl0eSA9XG4gICAgICBNYXRoLm1heCgwLCAoXG4gICAgICAgICAgICAgIDE3MSAtXG4gICAgICAgICAgICAgIDUuMiAqIE1hdGgubG9nKGNvbXB1dGVkLnZvbHVtZSkgLVxuICAgICAgICAgICAgICAwLjIzICogY29tcHV0ZWQuY3ljbG9tYXRpYyAtXG4gICAgICAgICAgICAgIDE2LjIgKiBNYXRoLmxvZyhjb21wdXRlZC5sbG9jKVxuICAgICAgICAgICkgKiAxMDAgLyAxNzEpO1xuICByZXR1cm4gY29tcHV0ZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYW5hbHl6ZVxufTtcblxuXG4iXX0=