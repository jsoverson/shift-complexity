'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyze = analyze;

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reduce = require('shift-reducer').default;

function uniq(array) {
  return Object.keys(array.reduce(function (p, n) {
    p[n] = true;return p;
  }, {}));
}

function analyze(ast) {
  if ((typeof ast === 'undefined' ? 'undefined' : _typeof(ast)) !== 'object') throw new Error('invalid argument to analyze(), AST required');

  var reducer = new _reducer2.default();
  var decoratedAst = reduce(reducer, ast);

  var stats = {};

  stats.root = computeStats({
    cyclomatic: decoratedAst.complexity.body.cyclomatic,
    operators: decoratedAst.complexity.body.operators,
    operands: decoratedAst.complexity.body.operands,
    lloc: decoratedAst.complexity.body.lloc
  });

  stats.average = {
    complexity: calculateAverage('cyclomatic', reducer, decoratedAst),
    lloc: calculateAverage('lloc', reducer, decoratedAst),
    functionComplexity: calculateAverage('cyclomatic', reducer, null),
    functionLloc: calculateAverage('lloc', reducer, null)
  };

  stats.total = computeStats({
    cyclomatic: reducer.cyclomatic,
    lloc: reducer.lloc,
    operators: reducer.operators,
    operands: reducer.operands,
    distinctOperators: uniq(reducer.operators),
    distinctOperands: uniq(reducer.operands)
  });

  stats.functions = summarizeFunctions(reducer);
  stats._ = {
    ast: decoratedAst,
    result: reducer
  };

  return stats;
}

function isRootNode(ast) {
  return ast.type === 'Module' || ast.type === 'Script';
}

function calculateAverage(prop, reducer, ast) {
  var scopes = reducer.functions.concat();
  if (ast && isRootNode(ast)) scopes.push(ast);
  //console.log('property : %s', prop);
  //console.log(scopes.length);
  //console.log(scopes);

  var total = scopes.reduce(function (p, n) {
    return p + n.complexity.body[prop];
  }, 0);
  return total / scopes.length;
}

function summarizeFunctions(reducer) {
  return reducer.functions.map(function (fn) {
    return computeStats(fn.complexity.body);
  });
}

function computeStats(stats) {
  var computed = {
    lloc: stats.lloc,
    cyclomatic: stats.cyclomatic,
    operators: stats.operators,
    operands: stats.operands,
    distinctOperators: uniq(stats.operators),
    distinctOperands: uniq(stats.operands),
    vocabulary: 0,
    length: 0,
    volume: 0,
    difficulty: 0,
    effort: 0,
    time: 0,
    bugs: 0,
    maintainability: 0
  };

  computed.vocabulary = computed.distinctOperands.length + computed.distinctOperators.length;
  computed.length = computed.operands.length + computed.operators.length;
  computed.volume = computed.length === 0 ? 0 : computed.length * (Math.log(computed.vocabulary) / Math.LN2);
  computed.difficulty = computed.distinctOperands.length === 0 ? 0 : computed.distinctOperators.length / 2 * (computed.operators.length / computed.distinctOperands.length);
  computed.effort = computed.difficulty * computed.volume;
  computed.time = 1000 * (computed.effort / 18);
  computed.bugs = Math.pow(computed.effort, 2 / 3) / 3000;

  computed.maintainability = Math.min(100, Math.max(0, (171 - 5.2 * Math.log(computed.volume) - 0.23 * computed.cyclomatic - 16.2 * Math.log(computed.lloc)) * 100 / 171));

  return computed;
}

exports.default = {
  analyze: analyze
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O1FBU2dCLE9BQU8sR0FBUCxPQUFPOzs7Ozs7OztBQVJ2QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUUsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDOztBQUkvQyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDbkIsU0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFLO0FBQUMsS0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxBQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3hFOztBQUVNLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMzQixNQUFJLFFBQU8sR0FBRyx5Q0FBSCxHQUFHLE9BQUssUUFBUSxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQzs7QUFFNUYsTUFBSSxPQUFPLEdBQUcsdUJBQXVCLENBQUM7QUFDdEMsTUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFeEMsTUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLE9BQUssQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0FBQ3hCLGNBQVUsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25ELGFBQVMsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2pELFlBQVEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQy9DLFFBQUksRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJO0dBQ3hDLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUMsT0FBTyxHQUFHO0FBQ2QsY0FBVSxFQUFFLGdCQUFnQixDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDO0FBQ2pFLFFBQUksRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQztBQUNyRCxzQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQztBQUNqRSxnQkFBWSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDO0dBQ3RELENBQUM7O0FBRUYsT0FBSyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUM7QUFDekIsY0FBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO0FBQzlCLFFBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixhQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7QUFDNUIsWUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO0FBQzFCLHFCQUFpQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzFDLG9CQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0dBQ3pDLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLE9BQUssQ0FBQyxDQUFDLEdBQUc7QUFDUixPQUFHLEVBQUcsWUFBWTtBQUNsQixVQUFNLEVBQUcsT0FBTztHQUNqQixDQUFDOztBQUVGLFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLFNBQU8sR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7Q0FDdkQ7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRTtBQUM1QyxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3hDLE1BQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7OztBQUFBLEFBSzdDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUMsQ0FBQztXQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25FLFNBQU8sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDOUI7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7QUFDbkMsU0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEVBQUU7V0FBSSxZQUFZLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7R0FBQSxDQUFDLENBQUM7Q0FDdEU7O0FBRUQsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0FBQzNCLE1BQUksUUFBUSxHQUFHO0FBQ2IsUUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2hCLGNBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtBQUM1QixhQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7QUFDMUIsWUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO0FBQ3hCLHFCQUFpQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ3hDLG9CQUFnQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ3RDLGNBQVUsRUFBQyxDQUFDO0FBQ1osVUFBTSxFQUFDLENBQUM7QUFDUixVQUFNLEVBQUMsQ0FBQztBQUNSLGNBQVUsRUFBQyxDQUFDO0FBQ1osVUFBTSxFQUFDLENBQUM7QUFDUixRQUFJLEVBQUMsQ0FBQztBQUNOLFFBQUksRUFBQyxDQUFDO0FBQ04sbUJBQWUsRUFBQyxDQUFDO0dBQ2xCLENBQUM7O0FBRUYsVUFBUSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDM0YsVUFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN2RSxVQUFRLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDO0FBQzNHLFVBQVEsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQzFELENBQUMsR0FDRCxBQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFLLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUEsQUFBQyxDQUFDO0FBQzNHLFVBQVEsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ3hELFVBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFBLEFBQUMsQ0FBQztBQUM5QyxVQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUV0RCxVQUFRLENBQUMsZUFBZSxHQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUN0QixHQUFHLEdBQ0gsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUMvQixJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsR0FDMUIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBLEdBQzVCLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUVwQixTQUFPLFFBQVEsQ0FBQztDQUNqQjs7a0JBRWM7QUFDYixTQUFPLEVBQVAsT0FBTztDQUNSIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgcmVkdWNlID0gcmVxdWlyZSggJ3NoaWZ0LXJlZHVjZXInKS5kZWZhdWx0O1xuXG5pbXBvcnQgQ29tcGxleGl0eVJlZHVjZXIgZnJvbSAnLi9yZWR1Y2VyJztcblxuZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXJyYXkucmVkdWNlKChwLG4pID0+IHtwW25dID0gdHJ1ZTsgcmV0dXJuIHA7fSx7fSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZShhc3QpIHtcbiAgaWYgKHR5cGVvZiBhc3QgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXJndW1lbnQgdG8gYW5hbHl6ZSgpLCBBU1QgcmVxdWlyZWQnKTtcbiAgXG4gIHZhciByZWR1Y2VyID0gbmV3IENvbXBsZXhpdHlSZWR1Y2VyKCk7XG4gIHZhciBkZWNvcmF0ZWRBc3QgPSByZWR1Y2UocmVkdWNlciwgYXN0KTtcbiAgXG4gIHZhciBzdGF0cyA9IHt9O1xuXG4gIHN0YXRzLnJvb3QgPSBjb21wdXRlU3RhdHMoe1xuICAgIGN5Y2xvbWF0aWM6IGRlY29yYXRlZEFzdC5jb21wbGV4aXR5LmJvZHkuY3ljbG9tYXRpYyxcbiAgICBvcGVyYXRvcnM6IGRlY29yYXRlZEFzdC5jb21wbGV4aXR5LmJvZHkub3BlcmF0b3JzLFxuICAgIG9wZXJhbmRzOiBkZWNvcmF0ZWRBc3QuY29tcGxleGl0eS5ib2R5Lm9wZXJhbmRzLFxuICAgIGxsb2M6IGRlY29yYXRlZEFzdC5jb21wbGV4aXR5LmJvZHkubGxvYyxcbiAgfSk7XG4gIFxuICBzdGF0cy5hdmVyYWdlID0ge1xuICAgIGNvbXBsZXhpdHk6IGNhbGN1bGF0ZUF2ZXJhZ2UoJ2N5Y2xvbWF0aWMnLCByZWR1Y2VyLCBkZWNvcmF0ZWRBc3QpLFxuICAgIGxsb2M6IGNhbGN1bGF0ZUF2ZXJhZ2UoJ2xsb2MnLCByZWR1Y2VyLCBkZWNvcmF0ZWRBc3QpLFxuICAgIGZ1bmN0aW9uQ29tcGxleGl0eTogY2FsY3VsYXRlQXZlcmFnZSgnY3ljbG9tYXRpYycsIHJlZHVjZXIsIG51bGwpLFxuICAgIGZ1bmN0aW9uTGxvYzogY2FsY3VsYXRlQXZlcmFnZSgnbGxvYycsIHJlZHVjZXIsIG51bGwpXG4gIH07XG4gIFxuICBzdGF0cy50b3RhbCA9IGNvbXB1dGVTdGF0cyh7XG4gICAgY3ljbG9tYXRpYzogcmVkdWNlci5jeWNsb21hdGljLFxuICAgIGxsb2M6IHJlZHVjZXIubGxvYyxcbiAgICBvcGVyYXRvcnM6IHJlZHVjZXIub3BlcmF0b3JzLFxuICAgIG9wZXJhbmRzOiByZWR1Y2VyLm9wZXJhbmRzLFxuICAgIGRpc3RpbmN0T3BlcmF0b3JzOiB1bmlxKHJlZHVjZXIub3BlcmF0b3JzKSxcbiAgICBkaXN0aW5jdE9wZXJhbmRzOiB1bmlxKHJlZHVjZXIub3BlcmFuZHMpLFxuICB9KTtcbiAgXG4gIHN0YXRzLmZ1bmN0aW9ucyA9IHN1bW1hcml6ZUZ1bmN0aW9ucyhyZWR1Y2VyKTtcbiAgc3RhdHMuXyA9IHtcbiAgICBhc3QgOiBkZWNvcmF0ZWRBc3QsXG4gICAgcmVzdWx0IDogcmVkdWNlcixcbiAgfTtcbiAgXG4gIHJldHVybiBzdGF0cztcbn1cblxuZnVuY3Rpb24gaXNSb290Tm9kZShhc3QpIHtcbiAgcmV0dXJuIGFzdC50eXBlID09PSAnTW9kdWxlJyB8fCBhc3QudHlwZSA9PT0gJ1NjcmlwdCc7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUF2ZXJhZ2UocHJvcCwgcmVkdWNlciwgYXN0KSB7XG4gIGxldCBzY29wZXMgPSByZWR1Y2VyLmZ1bmN0aW9ucy5jb25jYXQoKTtcbiAgaWYgKGFzdCAmJiBpc1Jvb3ROb2RlKGFzdCkpIHNjb3Blcy5wdXNoKGFzdCk7XG4gIC8vY29uc29sZS5sb2coJ3Byb3BlcnR5IDogJXMnLCBwcm9wKTtcbiAgLy9jb25zb2xlLmxvZyhzY29wZXMubGVuZ3RoKTtcbiAgLy9jb25zb2xlLmxvZyhzY29wZXMpO1xuXG4gIHZhciB0b3RhbCA9IHNjb3Blcy5yZWR1Y2UoKHAsbikgPT4gcCArIG4uY29tcGxleGl0eS5ib2R5W3Byb3BdLCAwKTtcbiAgcmV0dXJuIHRvdGFsIC8gc2NvcGVzLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gc3VtbWFyaXplRnVuY3Rpb25zKHJlZHVjZXIpIHtcbiAgcmV0dXJuIHJlZHVjZXIuZnVuY3Rpb25zLm1hcChmbiA9PiBjb21wdXRlU3RhdHMoZm4uY29tcGxleGl0eS5ib2R5KSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdGF0cyhzdGF0cykge1xuICB2YXIgY29tcHV0ZWQgPSB7XG4gICAgbGxvYzogc3RhdHMubGxvYyxcbiAgICBjeWNsb21hdGljOiBzdGF0cy5jeWNsb21hdGljLFxuICAgIG9wZXJhdG9yczogc3RhdHMub3BlcmF0b3JzLFxuICAgIG9wZXJhbmRzOiBzdGF0cy5vcGVyYW5kcyxcbiAgICBkaXN0aW5jdE9wZXJhdG9yczogdW5pcShzdGF0cy5vcGVyYXRvcnMpLFxuICAgIGRpc3RpbmN0T3BlcmFuZHM6IHVuaXEoc3RhdHMub3BlcmFuZHMpLFxuICAgIHZvY2FidWxhcnk6MCxcbiAgICBsZW5ndGg6MCxcbiAgICB2b2x1bWU6MCxcbiAgICBkaWZmaWN1bHR5OjAsXG4gICAgZWZmb3J0OjAsXG4gICAgdGltZTowLFxuICAgIGJ1Z3M6MCxcbiAgICBtYWludGFpbmFiaWxpdHk6MCxcbiAgfTtcbiAgXG4gIGNvbXB1dGVkLnZvY2FidWxhcnkgPSBjb21wdXRlZC5kaXN0aW5jdE9wZXJhbmRzLmxlbmd0aCArIGNvbXB1dGVkLmRpc3RpbmN0T3BlcmF0b3JzLmxlbmd0aDtcbiAgY29tcHV0ZWQubGVuZ3RoID0gY29tcHV0ZWQub3BlcmFuZHMubGVuZ3RoICsgY29tcHV0ZWQub3BlcmF0b3JzLmxlbmd0aDtcbiAgY29tcHV0ZWQudm9sdW1lID0gY29tcHV0ZWQubGVuZ3RoID09PSAwID8gMCA6IGNvbXB1dGVkLmxlbmd0aCAqIChNYXRoLmxvZyhjb21wdXRlZC52b2NhYnVsYXJ5KSAvIE1hdGguTE4yKTtcbiAgY29tcHV0ZWQuZGlmZmljdWx0eSA9IGNvbXB1dGVkLmRpc3RpbmN0T3BlcmFuZHMubGVuZ3RoID09PSAwID8gXG4gICAgMCA6IFxuICAgIChjb21wdXRlZC5kaXN0aW5jdE9wZXJhdG9ycy5sZW5ndGggLyAyKSAqIChjb21wdXRlZC5vcGVyYXRvcnMubGVuZ3RoIC8gY29tcHV0ZWQuZGlzdGluY3RPcGVyYW5kcy5sZW5ndGgpO1xuICBjb21wdXRlZC5lZmZvcnQgPSBjb21wdXRlZC5kaWZmaWN1bHR5ICogY29tcHV0ZWQudm9sdW1lO1xuICBjb21wdXRlZC50aW1lID0gMTAwMCAqIChjb21wdXRlZC5lZmZvcnQgLyAxOCk7XG4gIGNvbXB1dGVkLmJ1Z3MgPSBNYXRoLnBvdyhjb21wdXRlZC5lZmZvcnQsIDIvMykgLyAzMDAwO1xuXG4gIGNvbXB1dGVkLm1haW50YWluYWJpbGl0eSA9XG4gICAgTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCAoXG4gICAgICAgIDE3MSAtXG4gICAgICAgIDUuMiAqIE1hdGgubG9nKGNvbXB1dGVkLnZvbHVtZSkgLVxuICAgICAgICAwLjIzICogY29tcHV0ZWQuY3ljbG9tYXRpYyAtXG4gICAgICAgIDE2LjIgKiBNYXRoLmxvZyhjb21wdXRlZC5sbG9jKVxuICAgICAgKSAqIDEwMCAvIDE3MSkpO1xuICBcbiAgcmV0dXJuIGNvbXB1dGVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFuYWx5emVcbn07XG5cblxuXG4iXX0=